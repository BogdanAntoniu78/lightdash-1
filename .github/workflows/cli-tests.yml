name: CLI tests
on: [ deployment_status ]

env:
  PROJECT_DIR: "./examples/full-jaffle-shop-demo/dbt"
  PROFILES_DIR: "./examples/full-jaffle-shop-demo/profiles"
  PGHOST: ${{secrets.PGHOST}}
  PGPASSWORD: ${{secrets.PGPASSWORD}}
  PGPORT: 5432
  PGUSER: postgres
  PGDATABASE: postgres
jobs:
  cli-run:
    # Only trigger for correct environment and status
    if: ${{ github.event.deployment_status.state == 'success' && contains(github.event.deployment.environment, '- lightdash PR ')}}
    runs-on: ubuntu-latest
    steps:
      - name: Get PR number
        id: regex
        uses: AsasInnab/regex-action@v1
        with:
          regex_pattern: '[0-9]+$'
          regex_flags: 'gm'
          search_string: ${{github.event.deployment.environment}}
      - name: Get deployment url
        id: deployment_url
        env:
          DEPLOYMENT_URL: 'https://lightdash-pr-${{steps.regex.outputs.first_match}}.onrender.com'
        run:
          echo "::set-output name=url::$DEPLOYMENT_URL"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive  # Download DBT submodule
      
      - name: Get lightdash version 
        uses: sergeysova/jq-action@v2

      ## Install pip
      - uses: actions/setup-python@v1
        with:
          python-version: '3.7.x'
      - run: pip install dbt-postgres==1.2

      ## DBT run
      - name: Run DBT
        run: dbt run --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR


      ## Install lightdash cli from source
      - name: Install packages/common modules
        run: yarn workspace @lightdash/common install
      - name: Build packages/common module
        run: yarn common-build
      - name: Build packages/warehouses module
        run: yarn warehouses-build
      - name: Build and install packages/cli module
        run: cd packages/cli && yarn build && npm i -g 



      # Run tests
      - name: Check latest lightdash version
        run: lightdash --version

      # Get API token
      - name: Login and get API token 
        id: apitoken
        env: 
          LIGHTDASH_URL: ${{steps.deployment_url.outputs.url}}
        run: | 
          curl -s -X POST ${LIGHTDASH_URL}/api/v1/login -H 'Content-Type: application/json'  -d '{"email":"demo@lightdash.com","password":"demo_password!"}' --cookie-jar ./cookie > /dev/null
          curl -s -X POST ${LIGHTDASH_URL}/api/v1/user/me/personal-access-tokens  -H 'Content-Type: application/json'  -d '{"description":"e2e tests"}' --cookie ./cookie | echo "::set-output name=url::$(jq -r '.results.token')"

      - name: Echo token
        env: 
          LIGHTDASH_API_TOKEN: ${{steps.apitoken.outputs.value}}
        run: echo "token ${{steps.apitoken.outputs.value}} / ${{ steps.apitoken.outputs.value }} / $LIGHTDASH_API_TOKEN"
      
      - name: CLI login 
        run: lightdash login ${{steps.deployment_url.outputs.url}} login --token ${{steps.apitoken.outputs.value}}

      - name: CLI compile
        run: lightdash compile  --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR

      - name: CLI generate
        run: lightdash generate -y --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR

      - name: CLI create new project
        run: lightdash deloy --create  --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR

      - name: CLI start preview
        run: lightdash deloy --create  --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR --name "cli-test"

      - name: CLI stop preview
        run: lightdash stop-preview --name "cli-test"

